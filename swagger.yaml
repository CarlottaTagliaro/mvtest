swagger: "2.0"
info:
  title: "mvtest"
  description: "mvtest is an API to manage exams."
  version: "1.0.0"
  license:
    name: "GPLv3"
    url: "https://github.com/CarlottaTagliaro/mvtest/blob/master/LICENSE"
schemes:
- "https"
host: "mvtest-develop.herokuapp.com"
basePath: "/api"
tags:
- name: "Task"
  description: "Find everything about your tasks"
- name: "Exam"
  description: "Find everything about your exams"
- name: "Class"
  description: "Find everything about your classes"
- name: "Assignment"
  description: "Find everything about your assignments"
- name: "Review"
  description: "Find everything about your reviews"
- name: "Session"
  description: "Find everything about the current session"
consumes:
- "application/json"
produces:
- "application/json"
paths:

  /tasks:
    get:
      tags:
      - "Task"
      summary: "List all tasks the user has access to"
      responses:
        200:
          $ref: "#/responses/200Tasks"
        304:
          $ref: "#/responses/304"
        403:
          $ref: "#/responses/403"
    post:
      tags:
      - "Task"
      summary: "Create a task"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/TaskRequest"
      responses:
        201:
          $ref: "#/responses/201"
        403:
          $ref: "#/responses/403"

  /tasks/{idTask}:
    get:
      tags:
      - "Task"
      summary: "Find task by id"
      parameters:
      - name: "idTask"
        in: "path"
        description: "ID of the task to return"
        required: true
        type: "integer"
      responses:
        200:
          $ref: "#/responses/200Task"
        304:
          $ref: "#/responses/304"
        403:
          $ref: "#/responses/403"
        404:
          $ref: "#/responses/404"
    put:
      tags:
      - "Task"
      summary: "Edits a task"
      parameters:
      - name: "idTask"
        in: "path"
        description: "ID of the task to edit"
        required: true
        type: "integer"
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/TaskRequest"
      responses:
        204:
          $ref: "#/responses/204"
        403:
          $ref: "#/responses/403"
        404:
          $ref: "#/responses/404"
    delete:
      tags:
      - "Task"
      summary: "Deletes a task"
      parameters:
      - name: "idTask"
        in: "path"
        description: "ID of the task to delete"
        required: true
        type: "integer"
      responses:
        201:
          $ref: "#/responses/204"
        403:
          $ref: "#/responses/403"
        404:
          $ref: "#/responses/404"

  
  /exams:
    get:
      tags:
      - "Exam"
      summary: "List all exams the user has access to"
      responses:
        200:
          $ref: "#/responses/200Exams"
        304:
          $ref: "#/responses/304"
        403:
          $ref: "#/responses/403"
    post:
      tags:
      - "Exam"
      summary: "Creates an exam"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/ExamRequest"
      responses:
        201:
          $ref: "#/responses/201"
        403:
          $ref: "#/responses/403"

  /exams/{idExam}:
    get:
      tags:
      - "Exam"
      summary: "Find exam by ID"
      parameters:
      - name: "idExam"
        in: "path"
        description: "ID of the exam to return"
        required: true
        type: "integer"
      responses:
        200:
          $ref: "#/responses/200Exam"
        304:
          $ref: "#/responses/304"
        403:
          $ref: "#/responses/403"
        404:
          $ref: "#/responses/404"
    delete:
      tags:
      - "Exam"
      summary: "Deletes an exam"
      parameters:
      - name: "idExam"
        in: "path"
        description: "ID of the exam to delete"
        required: true
        type: "integer"
      responses:
        204:
          $ref: "#/responses/204"
        403:
          $ref: "#/responses/403"
        404:
          $ref: "#/responses/404"
    put:
      tags:
      - "Exam"
      summary: "Edits an Exam"
      parameters:
      - name: "idExam"
        in: "path"
        description: "ID of the exam to return"
        required: true
        type: "integer"
      - in: "body"
        name: "task id"
        schema: 
          type: "object"
          properties:
            tasks:
              type: array
              items:
                type: number
          example:
            tasks:
              - 1
              - 2
              - 3
      responses:
        204:
          $ref: "#/responses/204"
        403:
          $ref: "#/responses/403"
        404:
          $ref: "#/responses/404"


  /classes:
    get:
      tags:
      - "Class"
      summary: "Lists all classes the user belongs to"
      responses:
        200:
          $ref: "#/responses/200Classes"
        304:
          $ref: "#/responses/304"
        403:
          $ref: "#/responses/403"
    post:
      tags:
      - "Class"
      summary: "Creates a new class"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: '#/definitions/ClassRequest'
      responses:
        201:
          $ref: "#/responses/201"
        403:
          $ref: "#/responses/403"

  /classes/{idClass}:
    get:
      tags:
      - "Class"
      summary: "Find a class by ID"
      parameters:
      - name: "idClass"
        in: "path"
        description: "ID of the class to retrieve"
        required: true
        type: "integer"
      responses:
        200:
          $ref: "#/responses/200Class"
        304:
          $ref: "#/responses/304"
        403:
          $ref: "#/responses/403"
        404:
          $ref: "#/responses/404"
    put:
      tags:
      - "Class"
      summary: "Edits a class"
      parameters:
      - name: "idClass"
        in: "path"
        description: "ID of the class to edit"
        required: true
        type: "integer"
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: '#/definitions/ClassRequest'
      responses:
        200:
          $ref: "#/responses/204"
        403:
          $ref: "#/responses/403"
        404:
          $ref: "#/responses/404"
    delete:
      tags:
      - "Class"
      summary: "Deletes a class"
      parameters:
      - name: "idClass"
        in: "path"
        description: "ID of the class to delete"
        required: true
        type: "integer"
      responses:
        204:
          $ref: "#/responses/204"
        403:
          $ref: "#/responses/403"
        404:
          $ref: "#/responses/404"

          
  /assignments:
    get:
      tags: 
      - "Assignment"
      summary: "Get all assignments you've done"
      responses:
        200:
          $ref: "#/responses/200Assignments"
        304:
          $ref: "#/responses/304"
        403:
          $ref: "#/responses/403"
    post: 
      tags:
      - "Assignment"
      summary: "Creates a new assignment"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: '#/definitions/AssignmentRequest'
      responses:
        201:
          $ref: "#/responses/201"
        403:
          $ref: "#/responses/403"

  /assignments/{idAssignment}:
    get:
      tags:
      - "Assignment"
      summary: "Find assignment by id"
      parameters:
      - name: "idAssignment"
        in: "path"
        description: "ID of the assignment to return"
        required: true
        type: "integer"
      responses:
        200:
          $ref: "#/responses/200Assignment"
        304:
          $ref: "#/responses/304"
        403:
          $ref: "#/responses/403"
        404:
          $ref: "#/responses/404"
    put:
      tags:
      - "Assignment"
      summary: "Edits an assignment"
      parameters:
      - name: "idAssignment"
        in: "path"
        description: "ID of the assignment to edit"
        required: true
        type: "integer"
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: '#/definitions/AssignmentRequest'
      responses:
        204:
          $ref: "#/responses/204"
        403:
          $ref: "#/responses/403"
        404:
          $ref: "#/responses/404"
    delete:
      tags:
      - "Assignment"
      summary: "Deletes an assignment"
      parameters:
      - name: "idAssignment"
        in: "path"
        description: "ID of the assignment to delete"
        required: true
        type: "integer"
      responses:
        204:
          $ref: "#/responses/204"
        403:
          $ref: "#/responses/403"
        404:
          $ref: "#/responses/404"

  /assignments/{idAssignment}/submissions:
    get:
      tags: 
      - "Assignment"
      summary: "Get all submission you've done for that assignment"
      parameters:
        - name: "idAssignment"
          in: "path"
          description: "ID of the assignment"
          required: true
          type: "integer"
      responses:
        200:
          $ref: "#/responses/200AssignmentSubmission"
        304:
          $ref: "#/responses/304"
        403:
          $ref: "#/responses/403"
        404:
          $ref: "#/responses/404"
    post: #post cause we have to store all the submission, it is not possible to modify them
      tags:
      - "Assignment"
      summary: "Create a new submission"
      parameters:
      - name: "idAssignment"
        in: "path"
        description: "ID of the assignment"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/SubmissionRequest"
      responses:
        201:
          $ref: "#/responses/201"
        403:
          $ref: "#/responses/403"
        404:
          $ref: "#/responses/404"
    delete:
      tags:
      - "Assignment"
      summary: "deletes all submission for an assignment" #retire
      parameters:
      - name: "idAssignment"
        in: "path"
        required: true
        type: "integer"
      responses:
        204:
          $ref: "#/responses/204"
        403:
          $ref: "#/responses/403"
        404:
          $ref: "#/responses/404"

    
  /submissions/{idSubmission}/reviews:
    get:
      tags:
      - "Review"
      summary: "Get all reviews you've done"      
      parameters:
      - name: "idSubmission"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          $ref: "#/responses/200Reviews"
        304:
          $ref: "#/responses/304"
        403:
          $ref: "#/responses/403"
    post:
      tags:
      - "Review"
      summary: "Create a new review"
      parameters:
      - name: "idSubmission"
        in: "path"
        required: true
        type: integer
      - name: "body"
        in: "body"
        required: true  
        schema:
          $ref: '#/definitions/ReviewRequest'
      responses:
        201:
          $ref: "#/responses/201"
        403:
          $ref: "#/responses/403"

  /submissions/{idSubmission}/reviews/{idReview}:
    put:
      tags:
      - "Review"
      summary: "Edit a specific review"
      parameters:
      - name: "idSubmission"
        in: "path"
        required: true
        type: integer
      - name: "idReview"
        in: "path"
        required: true
        type: "number"
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: '#/definitions/ReviewRequest'
      responses:
        204:
          $ref: "#/responses/204"
        403:
          $ref: "#/responses/403"
        404:
          $ref: "#/responses/404"


  /session:
    get:
      tags:
      - "Session"
      summary: "Returns the user in the session"
      produces:
      - "text/plain"
      responses:
        200:
          $ref: "#/responses/200Session"
        204:
          $ref: "#/responses/204"
        304:
          $ref: "#/responses/304"
    post:
      tags:
      - "Session"
      summary: "Authenticates a user"
      produces:
      - "text/plain"
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          properties:
            username:
              type: "string"
              format: "email"
            password:
              type: "string"
              format: "password"
      responses:
        200:
          $ref: "#/responses/200Session"
        401:
          $ref: "#/responses/401"
    delete:
      tags:
      - "Session"
      summary: "Logs a user out"
      responses:
        204:
          $ref: "#/responses/204"
        403:
          $ref: "#/responses/403"
  /users:
    get:
      tags:
      - "Users"
      summary: "Returns the list of users"
      produces:
      - "text/plain"
      responses:
        200:
          $ref: "#/responses/200Users"
        304:
          $ref: "#/responses/304"
        403:
          $ref: "#/responses/403"
    post:
      tags:
      - "Users"
      summary: "Creates a new user"
      produces:
      - "text/plain"
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: '#/definitions/UserRequest'
      responses:
        201:
          $ref: "#/responses/201"
        403:
          $ref: "#/responses/403"
  /users/{idUser}:
    put:
      tags:
      - "Users"
      summary: "Edits a user"
      parameters:
      - name: "idUser"
        in: "path"
        description: "ID of the user to edit"
        required: true
        type: "integer"
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: '#/definitions/UserRequest'
      responses:
        204:
          $ref: "#/responses/204"
        403:
          $ref: "#/responses/403"
        404:
          $ref: "#/responses/404"
    delete:
      tags:
      - "Users"
      summary: "Deletes a user"
      parameters:
      - name: "idUser"
        in: "path"
        description: "ID of the user to delete"
        required: true
        type: "integer"
      responses:
        204:
          $ref: "#/responses/204"
        403:
          $ref: "#/responses/403"
        404:
          $ref: "#/responses/404"

responses:
    200:
      description: "OK"
    200User:
      description: "OK"
      schema:
        $ref: "#/definitions/User"
    200Users:
      description: "OK"
      schema:
        type: "array"
        items:
          $ref: "#/definitions/User"

    200Task:
      description: "OK"
      schema:
        $ref: "#/definitions/Task"
    200Tasks:
      description: "OK"
      schema:
        type: "array"
        items:
          $ref: "#/definitions/Task"

    200Exam:
      description: "OK"
      schema:
        $ref: "#/definitions/Exam"
    200Exams:
      description: "OK"
      schema:
        type: "array"
        items:
          $ref: "#/definitions/Exam"

    200Class:
      description: "OK"
      schema:
        $ref: "#/definitions/Class"
    200Classes:
      description: "OK"
      schema:
        type: "array"
        items:
          $ref: "#/definitions/Class"

    200Assignment:
      description: "OK"
      schema:
        $ref: "#/definitions/Assignment"
    200Assignments:
      description: "OK"
      schema:
        type: "array"
        items:
          $ref: "#/definitions/Assignment"
    200AssignmentSubmission:
      description: "OK"
      schema:
        type: "array"
        items:
          $ref: "#/definitions/Submission"

    200Review:
      description: "OK"
      schema:
        $ref: "#/definitions/Review"
    200Reviews:
      description: "OK"
      schema:
        type: "array"
        items:
          $ref: "#/definitions/Review"

    200Session:
      description: "Ok"
      schema:
        $ref: "#/definitions/User"
    201:
      description: "Created"
      schema:
        type: object
        properties:
          id:
            type: integer
    202:
      description: "Accepted"
    204:
      description: "No Content"
    304:
      description: "Not Modified"
    401:
      description: "Unauthorized"
    403:
      description: "Forbidden"
    404:
      description: "Not Found"
    500:
      description: "Internal Server Error"
      
definitions:
  Task:
    title: "Task"
    type: "object"
    properties:
      id:
        type: "number"
      question:
        type: "string"
      points:
        type: "number"
        format: "integer"
      choices:
        type: "array"
        items:
          type: "string"
      users:
        type: "array"
        items:
          $ref: "#/definitions/UserPerms"
    required:
      - "id"
      - "question"
      - "choices"
    example:
      id:  0
      question: "Example question"
      type: 1
      points: 10
      choices:
        - "First Answer"
        - "Second Answer"
        - "Third Answer"
        - "Fourth Answer"
      users:
        - email: "owner@mail.com"
          owner: true
          canWrite: true
        - email: "user@mail.com"
          owner: false
          canwrite: false
  UserRequest:
    title: "UserRequest"
    type: "object"
    properties:
      email:
        type: "string"
        format: "email"
      name:
        type: "string"
      admin:
        type: "boolean"
    example:
      email: "user@mail.com"
      name: "User Name"
      admin: false
  User:
    title: "User"
    type: "object"
    properties:
      id:
        type: "number"
        format: "integer"
      email:
        type: "string"
        format: "email"
      name:
        type: "string"
      admin:
        type: "boolean"
    example:
      id: 3
      email: "user@mail.com"
      name: "User Name"
      admin: false
  ClassRequest:
    title: "ClassRequest"
    type: "object"
    properties:
      name:
        type: "string"
      users:
        type: "array"
        items:
          $ref: "#/definitions/User"
    example:
      name: "Software Engeneering"
      users:
      - email: "student@mail.com"
        name: "Good Student"
  Class:
    title: "Class"
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      users:
        type: "array"
        items:
          $ref: "#/definitions/User"
    example:
      id: 0
      name: "Software Engeneering"
      users:
      - email: "student@mail.com"
        name: "Good Student"
  Exam:
    title: "Exam"
    type: "object"
    properties: 
      id:
        type: "number"
      owner:
          $ref: "#/definitions/User"
      totalPoints:
        type: "number"
        format: "integer"
      tasks:
        type: "array"
        items:
          type: "number"
    example:
      id: 0
      owner:
        email: "g.s@agg.it"
        name: "Mario"
      totalPoints: 60
      tasks:
        - 0
        - 1
  ExamRequest:
    title: "ExamRequest"
    type: "object"
    properties:
      owner:
          $ref: "#/definitions/User"
      tasks:
        type: "array"
        items:
          type: "number"
    example:
      owner:
        email: "g.s@agg.it"
        name: "Mario"
      tasks:
        - 0
        - 1


  UserPerms:
    title: "User Perms"
    type: "object"
    properties:
      email:
        type: "string"
      owner:
        type: "boolean"
      canWrite:
        type: "boolean"
  TaskRequest:
    title: "Task Request"
    type: "object"
    properties:
      question:
        type: "string"
      points:
        type: "number"
        format: "integer"
      choices:
        type: "array"
        items:
          type: "string"
    required:
      - "question"
      - "choices"
    example:
      question: "Example Question"
      points: 10
      choices:
        - "First Answer"
        - "Second Answer"
        - "Third Answer"
        - "Fourth Answer"
  AssignmentRequest:
    title: "AssignmentRequest"
    type: "object"
    properties: 
      deadline:
        type: "string"
        format: "date-time"
      review:
        type: "boolean"
      TA:
        $ref: "#/definitions/User"
      class:
        type: "array"
        items:
          $ref: "#/definitions/Class"
    example:
      deadline: "12-12-2018"
      review: true
      TA: 
        email: "g.s@agg.it"
        name: "Mario"
      class:
      - id: 0
        name: "Software Engeneering"
        users:
        - email: "student@mail.com"
          name: "Good Student"
  Assignment:
    title: "Assignment"
    type: "object"
    properties: 
      id:
        type: "number"
      deadline:
        type: "string"
        format: "date-time"
      review:
        type: "boolean"
      TA:
        $ref: "#/definitions/User"
      class:
        type: "array"
        items:
          $ref: "#/definitions/Class"
    example:
      id: 0
      deadline: "12-12-2018"
      review: true
      TA: 
        email: "g.s@agg.it"
        name: "Mario"
      class:
      - id: 0
        name: "Software Engeneering"
        users:
        - email: "student@mail.com"
          name: "Good Student"
  SubmissionRequest:
    title: "SubmissionRequest"
    type: "object"
    properties:
      answer:
        type: "string"
      time:
        type: "string"
        format: "date-time"
      task-id: 
        type: "number"
      Author: 
        $ref: "#/definitions/User" #is the id enough?
      assignment-id:
        type: "number"
    example:
      answer: "the correct answer is number 2"
      time: "12-12-2018"
      task-id: 3
      Author:
        email: "g.s@agg.com"
        name: "Giovanni Storti"
      assignment-id: 4
  Submission:
    title: "Submission"
    type: "object"
    properties:
      id:
        type: "number"
      answer:
        type: "string"
      time:
        type: "string"
        format: "date-time"
      task-id: 
        type: "number"
      mark:
        type: "number"
        format: "integer"
      needsRevision:
        type: "boolean"
      Author: 
        $ref: "#/definitions/User" #is the id enough?
      assignment-id:
        type: "number"
    example:
      id: 0
      answer: "the correct answer is number 2"
      time: "12-12-2018"
      task-id: 3
      mark: 8
      needsRevision: false
      Author:
        email: "g.s@agg.com"
        name: "Giovanni Storti"
      assignment-id: 4
  ReviewRequest:
    title: "ReviewRequest"
    type: "object"
    properties:
      submission-id:
        type: "number"
      author:
        $ref: "#/definitions/User"
      mark:
        type: "number"
      comment:
        type: "string"
    example:
      submission-id : 1 
      author:
        email: "g.s@agg.com"
        name: "Giovanni Storti"
      mark: 27
      comment: "good work, well done"
  Review:
    title: "Review"
    type: "object"
    properties:
      id: 
        type: "number"
      submission-id:
        type: "number"
      author:
        $ref: "#/definitions/User"
      mark:
        type: "number"
      comment:
        type: "string"
    example:
      id: 0
      submission-id : 1 
      author:
        email: "g.s@agg.com"
        name: "Giovanni Storti"
      mark: 27
      comment: "good work, well done"
