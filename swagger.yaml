swagger: '2.0'
info:
  version: '1.0'
  title: "mvtest"
  description: mvtest is an API to manage exams.
  license:
    name: GPLv3
    url: https://github.com/CarlottaTagliaro/mvtest/blob/master/LICENSE
host: mvtestse.herokuapp.io
basePath: "/"
tags:
- name: "Task"
  description: "Find everything about your tasks" 
- name: "Exam"
  description: "Find everything about your exams"
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /tasks:
    x-summary: Tasks Collection
    get:
      tags:
      - "Task"
      summary: List all tasks the user has access to
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
          
    put:
      tags:
      - "Task"
      description:
        You may create your own task using this action. 
      summary: Adds a Task
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TaskRequest'
      responses:
        201:
          description: 'Created'
          schema:
            $ref: '#/definitions/Task'
            
  /tasks/{id}:
    x-summary: Task
    get:
      tags:
      - "Task"
      summary: Find task by id
      description: Returns a single task
      produces:
        - application/json
      parameters:
      - name: id
        in: path
        description: ID of the task to return
        required: true
        type: integer
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Task'
    post:
      tags:
      - "Task"
      summary: Edits a task
      description: Edits a given task
      produces:
        - application/json
      parameters:
      - name: id
        in: path
        description: ID of the task to edit
        required: true
        type: integer
      responses:
        200:
          description: Updated
          schema:
            $ref: '#/definitions/Task'
    delete:
      tags:
      - "Task"
      summary: Deletes a task
      description: Deletes a given task
      parameters:
      - name: id
        in: path
        description: ID of the task to delete
        required: true
        type: integer
      responses:
        204:
          description: Deleted
  
  /exams:
    x-summary: Exams Collection
    get:
      tags:
      - "Exam"
      summary: List all exams the user has access to
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Exam'
          
definitions:
  Task:
    title: Task
    type: object
    properties:
      id:
        type: number
      question:
        type: string
      choices:
        type: array
        items:
          type: string
      users:
        type: array
        items:
          $ref: '#/definitions/UserPerms'
    required:
      - id
      - question
      - choices
    example:
      id:  0
      question: Example question
      type: 1
      choices:
        - First Answer
        - Second Answer
        - Third Answer
        - Fourth Answer
      users:
        - email: "owner@mail.com"
          owner: true
          canWrite: true
        - email: "user@mail.com"
          owner: false
          canwrite: false
 
  User:
    title: User
    type: object
    properties:
      email:
        type: string
      name:
        type: string

  Exam:
    title: Exam
    type: object
    properties: 
      id:
        type: number
      owner:
          $ref: '#/definitions/User'
      tasks:
        type: array
        items:
          $ref: '#/definitions/Task'
    example:
      id: 0
      owner:
        email: g.s@agg.it
        name: Mario
      tasks:
        - id:  0
          question: Example question
          type: 1
          choices:
            - First Answer
            - Second Answer
            - Third Answer
            - Fourth Answer
          users:
            - email: "owner@mail.com"
              owner: true
              canWrite: true
            - email: "user@mail.com"
              owner: false
              canwrite: false
      
  UserPerms:
    title: User Perms
    type: object
    properties:
      email:
        type: string
      owner:
        type: boolean
      canWrite:
        type: boolean
  
  TaskRequest:
    title: Task Request
    type: object
    properties:
      question:
        type: string
      choices:
        type: array
        items:
          type: string
    required:
      - question
      - choices
    example:
      question: Example Question
      choices:
        - First Answer
        - Second Answer
        - Third Answer
        - Fourth Answer