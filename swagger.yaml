swagger: '2.0'
info:
  version: '1.0'
  title: "mvtest"
  description: mvtest is an API to manage exams.
  license:
    name: GPLv3
    url: https://github.com/CarlottaTagliaro/mvtest/blob/master/LICENSE
host: mvtestse.herokuapp.io
basePath: "/"
tags:
- name: "Task"
  description: "Find everything about your tasks" 
- name: "Exam"
  description: "Find everything about your exams"
- name: "Class"
  description: "Find everything about your classes"
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /tasks:
    x-summary: Tasks Collection
    get:
      tags:
      - "Task"
      summary: List all tasks the user has access to
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
          
    put:
      tags:
      - "Task"
      description:
        You may create your own task using this action. 
      summary: Adds a Task
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TaskRequest'
      responses:
        201:
          description: 'Created'
          schema:
            $ref: '#/definitions/Task'
            
  /tasks/{id}:
    x-summary: Task
    get:
      tags:
      - "Task"
      summary: Find task by id
      description: Returns a single task
      produces:
        - application/json
      parameters:
      - name: id
        in: path
        description: ID of the task to return
        required: true
        type: integer
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Task'
    post:
      tags:
      - "Task"
      summary: Edits a task
      description: Edits a given task
      produces:
        - application/json
      parameters:
      - name: id
        in: path
        description: ID of the task to edit
        required: true
        type: integer
      responses:
        200:
          description: Updated
          schema:
            $ref: '#/definitions/Task'
    delete:
      tags:
      - "Task"
      summary: Deletes a task
      description: Deletes a given task
      parameters:
      - name: id
        in: path
        description: ID of the task to delete
        required: true
        type: integer
      responses:
        204:
          description: Deleted
  
  /exams:
    x-summary: Exams Collection
    get:
      tags:
      - "Exam"
      summary: List all exams the user has access to
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Exam'
    put:
      tags:
      - "Exam"
      summary: Creates an exam
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Exam'
      responses:
        201:
          description: 'Created'
          schema:
            $ref: '#/definitions/Exam'
  /exams/{id}:
    get:
      tags:
      - "Exam"
      summary: Find exam by id
      description: Returns a single exam
      produces:
        - application/json
      parameters:
      - name: id
        in: path
        description: ID of the exam to return
        required: true
        type: integer
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Exam'
    put:
      tags:
      - "Exam"
      description: You may want to add a Task to an existing exam
      summary: Adds a Task to an Exam
      parameters:
      - name: id
        in: path
        description: ID of the exam to return
        required: true
        type: integer
      - in: body
        name: task id
        schema: 
          type: array
          items:
            type: number 
          example:
            - 1
            - 2
            - 3
      responses:
        202:
          description: 'Added'
          schema:
            $ref: '#/definitions/Exam'

  /classes:
    x-summary: Classes collection
    get:
      tags:
      - "Class"
      summary: Lists all classes the user belongs to
      produces:
      - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Class'
    put:
      tags:
      - "Class"
      summary: Creates a new class
      produces:
      - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ClassRequest'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Class'
  /classes/{id}:
    x-summary: Classes collection
    get:
      tags:
      - "Class"
      summary: Deletes a class
      parameters:
      - name: id
        in: path
        description: ID of the exam to delete
        required: true
        type: integer
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Class'
    post:
      tags:
      - "Class"
      summary: Edits a class
      parameters:
      - name: id
        in: path
        description: ID of the exam to edit
        required: true
        type: integer
      responses:
        200:
          description: Class was successfully edited
          schema:
            $ref: '#/definitions/Class'
    delete:
      tags:
      - "Class"
      summary: Deletes a class
      parameters:
      - name: id
        in: path
        description: ID of the exam to delete
        required: true
        type: integer
      responses:
        204:
          description: Class was deleted successfully.
          
definitions:
  Task:
    title: Task
    type: object
    properties:
      id:
        type: number
      question:
        type: string
      choices:
        type: array
        items:
          type: string
      users:
        type: array
        items:
          $ref: '#/definitions/UserPerms'
    required:
      - id
      - question
      - choices
    example:
      id:  0
      question: Example question
      type: 1
      choices:
        - First Answer
        - Second Answer
        - Third Answer
        - Fourth Answer
      users:
        - email: "owner@mail.com"
          owner: true
          canWrite: true
        - email: "user@mail.com"
          owner: false
          canwrite: false
 
  User:
    title: User
    type: object
    properties:
      email:
        type: string
        format: email
      name:
        type: string

  ClassRequest:
    title: ClassRequest
    type: object
    properties:
      name:
        type: string
      users:
        type: array
        items:
          $ref: '#/definitions/User'
    example:
      name: Software Engeneering
      users:
      - email: student@mail.com
        name: Good Student

  Class:
    title: Class
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      users:
        type: array
        items:
          $ref: '#/definitions/User'
    example:
      id: 0
      name: Software Engeneering
      users:
      - email: student@mail.com
        name: Good Student

  Exam:
    title: Exam
    type: object
    properties: 
      id:
        type: number
      owner:
          $ref: '#/definitions/User'
      tasks:
        type: array
        items:
          type: number
    example:
      id: 0
      owner:
        email: g.s@agg.it
        name: Mario
      tasks:
        - 0
        - 1
      
  UserPerms:
    title: User Perms
    type: object
    properties:
      email:
        type: string
      owner:
        type: boolean
      canWrite:
        type: boolean
  
  TaskRequest:
    title: Task Request
    type: object
    properties:
      question:
        type: string
      choices:
        type: array
        items:
          type: string
    required:
      - question
      - choices
    example:
      question: Example Question
      choices:
        - First Answer
        - Second Answer
        - Third Answer
        - Fourth Answer